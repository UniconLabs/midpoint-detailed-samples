<?xml version="1.0"?>
<!-- Default Global User Object Tempalte for UW Madison -->
<objectTemplate xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
                xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
                oid="65ac74a1-c02c-4d1b-9581-cbff6987fdb9">
    <name>Default User Template</name>
    <description>
        This is a Global Default All User Object Template and will auto-assign to
         Grouper Subject Registry and more.
    </description>

    <!--Compute User Full Name -->
    <mapping>
        <description>
            Sets a full name as a concatenation of givenName and familyName.
        </description>
        <strength>weak</strength>
        <source>
            <path>$user/givenName</path>
        </source>
        <source>
            <path>$user/familyName</path>
        </source>
        <expression>
            <script>
                <language>http://midpoint.evolveum.com/xml/ns/public/expression/language#Groovy</language>
                <code>
                    givenName + ' ' + familyName
                </code>
            </script>
        </expression>
        <target>
            <path>$user/fullName</path>
        </target>
    </mapping>
    <!-- End Compute User FullName -->

    <!-- Assign User's Grouper Groups -->
    <mapping>
        <strength>strong</strength>
        <source>
            <path>$user/extension/grouperManifestSubjectId</path>
        </source>
        <expression>
            <script>
                <code>
                    import com.evolveum.midpoint.xml.ns._public.common.common_3.*
                    import com.evolveum.midpoint.schema.constants.*
                    import com.evolveum.midpoint.schema.*
                    import javax.xml.namespace.*
                    import com.evolveum.midpoint.util.*
                    import com.evolveum.midpoint.prism.path.*

                    GROUPER_RESOURCE_OID = 'ef34e41c-fc63-499b-bc44-2235ecabba32'
                    MEMBER_NAME = new QName(MidPointConstants.NS_RI, 'member')

                    memberDef = prismContext.definitionFactory().createPropertyDefinition(MEMBER_NAME, DOMUtil.XSD_STRING)
                    memberDef.setMaxOccurs(-1)

                    shadowQuery = prismContext.queryFor(ShadowType.class)
                    .item(ShadowType.F_RESOURCE_REF).ref(GROUPER_RESOURCE_OID)
                    .and().item(ShadowType.F_SYNCHRONIZATION_SITUATION).eq(SynchronizationSituationType.LINKED)
                    .and().item(ShadowType.F_KIND).eq(ShadowKindType.ENTITLEMENT)
                    .and().item(ShadowType.F_INTENT).eq('group')
                    .and().block().item(ShadowType.F_DEAD).isNull().or().item(ShadowType.F_DEAD).eq(false).endBlock()
                    .and().item(ItemPath.create(ShadowType.F_ATTRIBUTES, MEMBER_NAME), memberDef).eq(basic.stringify(grouperManifestSubjectId))
                    .build()

                    //log.info('shadowQuery = {}\n{}', shadowQuery, shadowQuery.debugDump())
                    options = SelectorOptions.createCollection(GetOperationOptions.createNoFetch())
                    shadows = midpoint.searchObjects(ShadowType.class, shadowQuery, options)
                    //log.info('shadows found for {}: {}', name, shadows)

                    orgNames = shadows.collect { basic.stringify(it.name) }            // todo - use attributes
                    log.info('org names = {}', orgNames)

                    if (!orgNames.isEmpty()) {
                    orgQueryBuilder = prismContext.queryFor(OrgType.class)

                    first = true
                    for (orgName in orgNames) {
                    if (first) {
                    first = false
                    } else {
                    orgQueryBuilder = orgQueryBuilder.or()
                    }
                    orgQueryBuilder = orgQueryBuilder.item(ItemPath.create(OrgType.F_EXTENSION, 'grouperName')).eq(orgName)
                    }

                    orgQuery = orgQueryBuilder.build()
                    //log.info('org query:\n', orgQuery.debugDump())

                    orgs = midpoint.searchObjects(OrgType.class, orgQuery, null)
                    log.info('orgs found: {}', orgs)

                    orgs.collect {
                    new AssignmentType(prismContext)
                    .subtype('grouper-group')
                    .targetRef(it.oid, OrgType.COMPLEX_TYPE)
                    }
                    } else {
                    null
                    }
                </code>
            </script>
        </expression>
        <target>
            <path>assignment</path>
            <set>
                <condition>
                    <script>
                        <code>
                            assignment?.subtype.contains('grouper-group')
                        </code>
                    </script>
                </condition>
            </set>
        </target>
    </mapping>
    <!-- End User Grouper Groups Assignment -->

</objectTemplate>
