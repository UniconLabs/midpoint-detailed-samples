<archetype xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
           xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
           xmlns:icfs="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3"
           xmlns:org="http://midpoint.evolveum.com/xml/ns/public/common/org-3"
           xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3"
           xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3"
           xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:ext="http://midpoint-grouper-integration.itap.internet2.edu"
           oid="81f30e37-f7d5-4153-9c96-f049dd144e19" version="0">
    <name>Grouper Group Archetype</name>
    <archetypePolicy>
        <display>
            <label>Grouper Group</label>
            <pluralLabel>Grouper Groups</pluralLabel>
            <icon>
                <cssClass>fa fa-users</cssClass>
                <color>lightcoral</color>
            </icon>
        </display>
    </archetypePolicy>
    <inducement>
        <focusType>OrgType</focusType>
        <focusMappings>
            <mapping>
                <name>parentOrg</name>
                <description>This mapping fills in and creates if necessary the parent org assignment based on the Grouper Group Id stored in the Organization's name field (e.g. test:stuff:anotherfolder:mygroup)</description>
                <strength>strong</strength>
                <source>
                    <path>name</path>
                </source>
                <expression>
                    <script>
                        <code>
                            import com.evolveum.midpoint.xml.ns._public.common.common_3.*
                            import com.evolveum.prism.xml.ns._public.types_3.PolyStringType

                            def orgTarget = new ObjectReferenceType()
                            def currentGroupId = basic.stringify(name)

                            if (currentGroupId?.contains(":")) {
                                //there is a parent group that we need to assign, it may or may not exist
                                log.debug("GrouperParentRef: Processing parent org relationship for org with group id [" + currentGroupId + "]...")
                                def groupIdList = currentGroupId?.trim()?.tokenize(":")

                                groupIdList.remove(groupIdList.size()-1) //remove the current group name
                                def parentOrgId = groupIdList.join(":")

                                def parentOrg = midpoint.getOrgByName(parentOrgId)
                                log.debug("GrouperParentRef: Processing parentOrg with name [" + parentOrgId + "] for group id [" + currentGroupId + "]...")

                                if (parentOrg == null) {
                                    log.debug("GrouperParentRef: Parent org with name [" + parentOrgId + "] wasn't found for groupId [" + currentGroupId + "], creating!")
                                    parentOrg = midpoint.createEmptyObjectWithName(OrgType.class, parentOrgId)
                                    def parentOrgName = groupIdList.last()

                                    log.debug("GrouperParentRef: Parent org created. Setting displayName of [" + parentOrgName + "] from id [" + parentOrgId + "].")
                                    parentOrg.setDisplayName(new PolyStringType(parentOrgName))
                                    parentOrg.setDescription(parentOrgId)
                                    def archAssign = new AssignmentType()
                                    def archTarget = new ObjectReferenceType()
                                    archTarget.setOid("81f30e37-f7d5-4153-9c96-f049dd144e19")
                                    archTarget.setType(ArchetypeType.COMPLEX_TYPE)
                                    archAssign.setTargetRef(archTarget)
                                    parentOrg.getAssignment().add(archAssign)
                                    midpoint.addObject(parentOrg)
                                }

                                orgTarget.setOid(parentOrg.getOid())
                                orgTarget.setType(OrgType.COMPLEX_TYPE)

                            } else {
                                log.debug("GrouperParentRef: No Grouper hierarchy found in group id [" + currentGroupId + "] assigning to the default Grouper Groups top-level org!")
                                //default top-level org for grouper groups
                                orgTarget.setOid("dd860fc2-a8ae-4657-8f05-9a32adae279b")
                                orgTarget.setType(OrgType.COMPLEX_TYPE)
                            }

                            def returnAssign = new AssignmentType()
                            returnAssign.setTargetRef(orgTarget)

                            return returnAssign
                        </code>
                    </script>
                </expression>
                <target>
                    <path>assignment</path>
                </target>
            </mapping>
        </focusMappings>

        <!--
            Inducement order of 1 means these mappings are to be applied on org object, because the assignment structure should be this:
                org -> archetype
         -->
        <order>1</order>
    </inducement>
</archetype>

